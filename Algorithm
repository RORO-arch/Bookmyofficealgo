package bookdemo;

import java.util.ArrayList;
import java.util.List;

public class Seatalgo {
	private int no_of_seats = 74;
	private int rows[][] = { { 4, 2, 4, 3 }, { 2, 5, 2, 3 } };
	private int seats_per_row[][] = { { 10, 5, 6, 7 }, { 5, 4, 7, 8 } };
	private List<Teams> teams = new ArrayList<>();
	private static int[] floor_port;

	private void setrows() {

	}

	private void setseats_per_row() {

	}

	private void setteams() {
		teams.add(new Teams(1, 9));
		teams.add(new Teams(2, 8));
		teams.add(new Teams(3, 7));
		teams.add(new Teams(4, 6));
		teams.add(new Teams(5, 6));
		teams.add(new Teams(6, 4));
		teams.add(new Teams(7, 9));
		teams.add(new Teams(8, 8));
		teams.add(new Teams(9, 7));
		teams.add(new Teams(10, 6));
		teams.add(new Teams(11, 4));

	}

	public int[] calc_floor_port() {
		int temp = 0;

		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 4; j++) {
				temp += rows[i][j] * seats_per_row[i][j];
				if (temp >= no_of_seats) {
					return new int[] { i, j };
				}

			}
		}

		return null;

	}

	public void arrange() {
		int floor = 0, port = 0, seats = 0;
		floor_port = calc_floor_port();
		System.out.println(floor_port[0] + " " + floor_port[1]);
		int i = 0, j = 0;
		setteams();

		if (!teams.isEmpty()) {
			for (Teams obj : teams) {
				// System.out.println(obj.getTeam_size());
				if (no_of_seats > 0) {
					if ((rows[floor][port] * seats_per_row[floor][port]) - seats >= obj.getTeam_size()) {
						System.out.println(floor + " " + port + " " + seats + " "
								+ rows[floor][port] * seats_per_row[floor][port]);

						seats += obj.getTeam_size();

						System.out.println(floor + " " + port + " " + seats + " "
								+ rows[floor][port] * seats_per_row[floor][port]);
					} else {

						seats = 0;
						if (port == 3) {
							floor += 1;
							port = 0;
						} else {
							port += 1;
						}
						if (floor >= floor_port[0] && port > floor_port[1]) {
							break;
						}
						System.out.println(floor + " " + port + " " + seats + " "
								+ rows[floor][port] * seats_per_row[floor][port]);
						seats += obj.getTeam_size();
						System.out.println(floor + " " + port + " " + seats + " "
								+ rows[floor][port] * seats_per_row[floor][port]);
					}

				}
				System.out.println("New team");
			}

		} else {

		}

	}

	public static void main(String args[]) {
		Seatalgo seatalgo = new Seatalgo();
		seatalgo.arrange();

		// floor_port=seatalgo.calc_floor_port();
		// System.out.print(floor_port[0]+ " " + floor_port[1]);
	}
}
